//this is a shortcut to center any block element
@mixin center-auto {
    margin{
        left: auto;
        right: auto;
    }
}

//this is how we could use it v

//div{
//    @include center-auto()
//}

@mixin box($width, $height:$width) {
    width: $width;
    height: $height;
}

// div{
//     @include box(200px);
// }

// div{
//     @include box(200px, 100px);
// }

//THIS MAKES THE BACKGORUND IMAGE INSTANTLY COVER THE BACKGROUND... ALWAYS

@mixin background-fill(){
    background-position: center;
    background-repeat: no-repeat;
    backgroind-size: cover;
}

// div{
//     background-image: url("this.image");
//     @include background-fill();
// }



//flex box toolkit
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-center-column {
    @include flex-center();
    flex-direction: column;
}

@mixin pseudos( $width: 100%, $height: 100%, $display: block, $pos: absolute, $content: ""){
    content: $content;
    display: $display;
    @include box($width, $height);
}

// div{
//     position: relative;
//     width: 200px;
//     height: 200px;
//     &::after{
//         @include pseudos();
//         background: linear-gradient();
//     }
// }

//positioning helpers
@mixin position($position, $args) {
    @each $pos in top right bottom left{
        $i: index($args, $pos);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)){
            #{$pos}:nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args: " ") {
    @include position(absolute, $args);
}

@mixin fixed($args: " "){
    @include position(fixed, $args);
}

@mixin relative($args: " ") {
    @include position(relative, $args);
}

// .menu li{
//     @include absolute(top 100% left 0);
// }

// .sticky-bar{
//     @include fixed(top 0 left 0);
// }

// .submenu{
//     @include relative()
// }

//the reason we don't have phone here v, is because the base size is going to be phone

$phone-wide: 480px;
$phablet: 560px;
$tablet: 750px;
$tablet-small: 640px;
$large: 1024px;
$desktop: 1080px;
$desktop-wide: 1440px;

@mixin tablet(){
    @media only screen and (min-width: $tablet){
        @content;
    }
}
@mixin large(){
    @media only screen and (min-width: $large){
        @content;
    }
}
@mixin desktop(){
    @media only screen and (min-width: $desktop){
        @content;
    }
}
// div{
//     font-size: 3rem;
//     @include tablet(){
//         font-size: 2rem;
//     }
// }

@mixin fade($type) {
    @if $type == "hide" {
        visibility: hidden;
        opacity: 0;
        transition: $transition;
    }
    @else if $type == "show" {
        opacity: 1;
        visibility: show;
        transition: $tranition;
    }
}

//mixin for input placeholder

@mixin input-placeholder{
    &.placeholder{
        @content;
    }
    &:-moz-placeholder{
        @content;
    }
    &::-moz-placeholder{
        @content;
    }
    &:-ms-input-placeholder{
        @content;
    }
    &::-webkit-input-placeholder{
        @content;
    }
}

// div{
//     @include input-placeholder(){
//         color: red;
//     }
// }

@mixin font-face($font-name, $file-name, $weight: "normal", $style: "normal") {
    @font-face{
        font-family: quote($font-name);
        src: url($file-name + ".eot");
        src: url($file-name + ".eot?#iefix") format("embedded-opentype"),
            url($file-name + ".woff") format("woff")
            url($file-name + "ttf") format("truetype"),
            url($file-name + ".svg") format(".svg");
        font-weight: $weight;
        font-style: $style;
    }
}

// form{
//     @include font-face("myFont", "./base/typeography/myfont.ttf", $style: underline);
// }
//you can also put these fonts at the top of the page instead of embedding it so you can use it throughout
//the page

@mixin text-short {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

//creating css triangles, arrows, etcetera
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
    @include pseudos($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid;
        margin-top: 0 - round($size/2.5);
    }
    @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid;
        margin-bottom: 0 - round($size/2.5);
    }
    @else if $direction == right {
        border-left: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid;
        margin-right: $size;
    }
    @else if $direction == down {
        border-left: $size solid transparent;
        border-bottom: $size solid transparent;
        border-top: $size solid;
        margin-left: $size;
    }

    // menu.li{
    //     @include css-triangle(red, right, 12px);
    // }
}